#include <iostream>
#include <cmath>
#include <cstdlib>
#include <iomanip>

/*

Test case 1: Drop 1 chip into slot 1, finishes in slot 3. Prize money equal 0.

Test Case 2: Drop 1000 chips into slot 3, 500 end up in slot 4, 300 in slot 2 and 200 in slot. total winnings: (500 * 10000) + (300*1000)=5,300,000 average winnings 5,300.

Test Case 3: drop 1 into slot 5 finishes in slot 5 no money is won.

*/

using namespace std;

//--------------Global Variable and Constant Declaration------------------\\;

double BOUNDS = .5;
int LEFTRIGHT = 0;
const int FINAL_LOCATION_0 = 0;
const int FINAL_LOCATION_1 = 1;
const int FINAL_LOCATION_2 = 2;
const int FINAL_LOCATION_3 = 3;
const int FINAL_LOCATION_4 = 4;
const int FINAL_LOCATION_5 = 5;
const int FINAL_LOCATION_6 = 6;
const int FINAL_LOCATION_7 = 7;
const int FINAL_LOCATION_8 = 8;
const int NUMBER_SLOTS = 8;
const int NUMBER_ROWS = 13;


const double PRIZE_0 = 100;
const double PRIZE_1 = 500;
const double PRIZE_2 = 1000;
const double PRIZE_3 = 0;
const double PRIZE_4 = 10000;
const double PRIZE_5 = PRIZE_3;
const double PRIZE_6 = PRIZE_2;
const double PRIZE_7 = PRIZE_1;
const double PRIZE_8 = 100;


/* start of the functions. First function is the menu function.

It contains the original cout statements and the ability to pick an option. Also has the invalid option if they enter something they aren't supposed too.

*/

int single_chip_drop_with_cout(int starting_slot)
{
	int movement = 0;
	
	movement = starting_slot;

	for (int i = 0; i < NUMBER_ROWS; i++)
	{
		cout << movement << " ";

		if (movement <= 0)
		{
			movement = movement + BOUNDS;
		}
		else if (movement >= 8)
		{
			movement = movement - BOUNDS;
		}
		else if (movement > 0 && movement < 8)
		{
			LEFTRIGHT = rand() % 2;

			if (LEFTRIGHT == 1)
			{
				movement = movement + .5;
				cout << movement << " ";
			}

			else if (LEFTRIGHT == 0)
			{
				movement = movement - .5;
				cout << movement << " ";
			}
			else
			{
				cout << "THIS IS BROKEN IN THE MOVEMENT/RAND PHASE!";

			}
		}

	}
	return(movement);
}

int single_chip_drop_without_cout(int starting_slot)
{
	int movement = 0;

	movement = starting_slot;

	for (int i = 0; i < NUMBER_ROWS; i++)
	{
		
		if (movement <= 0)
		{
			movement = movement + BOUNDS;
		}
		else if (movement >= 8)
		{
			movement = movement - BOUNDS;
		}
		else if (movement > 0 && movement < 8)
		{
			LEFTRIGHT = rand() % 2;

			if (LEFTRIGHT == 1)
			{
				movement = movement + .5;
			}

			else if (LEFTRIGHT == 0)
			{
				movement = movement - .5;
				
			}
			else
			{
				cout << "THIS IS BROKEN IN THE MOVEMENT/RAND PHASE!";

			}
		}

		
		}
	return(movement);
}

double get_prize_money(int final_slot)
{
	double prize_money_final = 0;

	if ( final_slot == FINAL_LOCATION_0)
	{
		prize_money_final = prize_money_final + PRIZE_0;
	}
	else if (final_slot == FINAL_LOCATION_1)
	{
		prize_money_final = prize_money_final + PRIZE_1;
	}
	else if (final_slot == FINAL_LOCATION_2)
	{
		prize_money_final = prize_money_final + PRIZE_2;
	}
	else if (final_slot == FINAL_LOCATION_3)
	{
		prize_money_final = prize_money_final + PRIZE_3;
	}
	else if (final_slot == FINAL_LOCATION_4)
	{
		prize_money_final = prize_money_final + PRIZE_4;
	}
	else if (final_slot == FINAL_LOCATION_5)
	{
		prize_money_final = prize_money_final + PRIZE_5;
	}
	else if (final_slot == FINAL_LOCATION_6)
	{
		prize_money_final = prize_money_final + PRIZE_6;
	}
	else if (final_slot == FINAL_LOCATION_7)
	{
		prize_money_final = prize_money_final + PRIZE_7;
	}
	else if (final_slot == FINAL_LOCATION_8)
	{
		prize_money_final = prize_money_final + PRIZE_8;
	}
	else
	{
		cout << "Get Prize money is broken." << endl;

	}

	return(prize_money_final);
}

int multiple_chip_drop_with_cout(int starting_slot, int user_chips)
{
	double per_chip;
	double multiple_chip_prize = 0;

	for (int number_chips = 0; number_chips < user_chips; number_chips++)
	{
		int final_slot = 0;
		final_slot = single_chip_drop_without_cout(starting_slot);

		double single_chip_prize = get_prize_money(final_slot);


		multiple_chip_prize = multiple_chip_prize + single_chip_prize;

		per_chip = multiple_chip_prize / user_chips;

	}
	cout << fixed << showpoint << setprecision(2);
	cout << "Total Winnings: $" << multiple_chip_prize << endl;
	cout << "Average Per Chip Winnings: $" << per_chip << endl;

		return(multiple_chip_prize);

	}

int multiple_chip_drop_without_cout(int starting_slot, int user_chips)
{
	double multiple_chip_prize = 0;

	for (int number_chips = 0; number_chips < user_chips; number_chips++)
	{
		int final_slot = 0;
		final_slot = single_chip_drop_without_cout(starting_slot);

		double single_chip_prize = get_prize_money(final_slot);


		multiple_chip_prize = multiple_chip_prize + single_chip_prize;
	}
	return(multiple_chip_prize);

}



double bowl_of_chips(double starting_slot, int user_chips)
	{
		double prize_money_final = 0;

		prize_money_final = multiple_chip_drop_with_cout(starting_slot, user_chips);

		system("pause");
		return(prize_money_final);
	}





double all_the_slots(int user_chips)
{
	int starting_slot = 0;
	double prize_money_final = 0;

	for (int starting_slot = 0; starting_slot <= NUMBER_SLOTS; starting_slot++)
	{
		double prize_money_final = 0;
		double multiple_prize_final = 0;

		multiple_prize_final = multiple_chip_drop_without_cout(starting_slot, user_chips);

		prize_money_final = multiple_prize_final + multiple_prize_final;


		double average_prize = prize_money_final / user_chips;

		cout << fixed << showpoint << setprecision(2);
		cout << "Total Winnings for slot " << starting_slot << " : $" << prize_money_final << endl;
		cout << "Average Per Chip Winnings: $" << average_prize << endl << endl;
	}


	system("pause");
	return(prize_money_final);
}

double Let_the_chips_fall(int starting_slot, int leftright)
{
	double prize_money_final;
	int final_slot;

	cout << "[";

	//start of the movement down, defines rows and then the actually movement rules.
	final_slot = single_chip_drop_with_cout(starting_slot);
	prize_money_final = get_prize_money(final_slot);


	cout << "]" << endl;
	if (prize_money_final == PRIZE_0)
	{
		cout << fixed << showpoint << setprecision(2) << "Winnings: $" << PRIZE_0 << endl;
	}
	else if (prize_money_final == PRIZE_1)
	{
		cout << fixed << showpoint << setprecision(2) << "Winnings: $" << PRIZE_1 << endl;
	}
	else if (prize_money_final == PRIZE_2)
	{
		cout << fixed << showpoint << setprecision(2) << "Winnings: $" << PRIZE_2 << endl;
	}
	else if (prize_money_final == PRIZE_3)
	{
		cout << fixed << showpoint << setprecision(2) << "Winnings: $" << PRIZE_3 << endl;
	}
	else if (prize_money_final == PRIZE_4)
	{
		cout << fixed << showpoint << setprecision(2) << "Winnings: $" << PRIZE_4 << endl;
	}
	else
	{
		cout << "The cout for let the chips fall is broken.";
	}
	system("pause");

	return(prize_money_final);
}

int get_menu()
{
	int user_chips;
	int starting_slot;
	int user_option = 0;
	cout << "MENU" << endl;
	cout << "Please select your option:" << endl;
	cout << "1 - Drop a single chip into one slot." << endl;
	cout << "2 - Drop multiple chips into one slot." << endl;
	cout << "3 - Drop chips in each slot." << endl;
	cout << "4 - Quit the program." << endl;
	cout << "Please enter your selection now: ";
	cin >> user_option;

	while (cin.fail())
	{
		cout << "INVALID SELECTION. Please select 1, 2, or 3." << endl;
		cin.clear();
		cin.ignore(1000000, '\n');
		system("pause");
		system("cls");
		user_option = get_menu();
	}


	while (user_option > 4 || user_option < 1)

	{
		cout << "INVALID SELECTION. Please select 1, 2, or 3." << endl;
		system("cls");
		user_option = get_menu();
	}


	while (user_option >= 1 && user_option <= 3)
	{
		if (user_option == 1)
		{
			cout << "*** DROPPING A SINGLE CHIP ***" << endl;
			cout << "Where do you want to place the chip? (0-8): ";
			cin >> starting_slot;

			while (cin.fail())
			{
				cout << "INVALID SELECTION. Please select 1, 2, or 3." << endl;
				cin.clear();
				cin.ignore(1000000, '\n');
				system("pause");
				system("cls");
				user_option = get_menu();
			}

			while (starting_slot > 8 || starting_slot < 0)
			{
				cout << "INVALID SLOT" << endl;
				system("pause");
				system("cls");
				cin.clear(1000, '\n');
				user_option = get_menu();
			}

			Let_the_chips_fall(starting_slot, LEFTRIGHT);
			system("cls");
			user_option = get_menu();
		}


		if (user_option == 2)

		{
			cout << "MULTIPLE" << endl;
			cout << "Where do you want to drop the chips? ";
			cin >> starting_slot;

			while (cin.fail())
			{
				cout << "INVALID SELECTION. Please select 1, 2, or 3." << endl;
				cin.clear();
				cin.ignore(1000000, '\n');
				system("pause");
				system("cls");
				user_option = get_menu();
			}

			/* Question two ?*/

			while (starting_slot > 8 || starting_slot < 0)
			{
				cout << "INVALID SLOT" << endl;
				system("pause");
				system("cls");
				cin.clear(1000, '\n');
				user_option = get_menu();

			}

			cout << "How many chips would you like to put in? ";

			cin >> user_chips;

			while (user_chips <= 0)
			{
				cout << "INVALID NUMBER OF CHIPS. RETURNING TO MENU.";
				system("pause");
				system("cls");
				user_option = get_menu();
			}

			bowl_of_chips(starting_slot, user_chips);
			system("cls");
			user_option = get_menu();
		}


		if (user_option == 3)

		{
			cout << "*** DROP CHIPS IN EVERY SLOT ***" << endl;
			cout << "How many chips do you want to drop? ";
			cin >> user_chips;

			while (cin.fail())
			{
				cout << "INVALID SELECTION. Please select 1, 2, or 3." << endl;
				cin.clear();
				cin.ignore(1000000, '\n');
				system("pause");
				system("cls");
				user_option = get_menu();
			}

			while (user_chips <= 0)
			{
				cout << "INVALID NUMBER OF CHIPS. RETURNING TO MENU.";
				system("pause");
				system("cls");
				user_option = get_menu();
			}

			all_the_slots(user_chips);
			system("cls");
			user_option = get_menu();
		}
	}

	if (user_option == 4)
	{
		cout << "GOODBYE" << endl;
	}
	return(user_option);

}

int main()
{
	srand(time(0));
	get_menu();


	return(0);

}
